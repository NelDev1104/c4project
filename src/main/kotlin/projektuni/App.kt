/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package projektuni

import io.javalin.Javalin
import io.javalin.http.Context
import io.javalin.http.ForbiddenResponse
import java.io.File
import java.io.InputStream

@ExperimentalUnsignedTypes
class App {

    var game = FourConnect(longArrayOf(0L,0L), IntArray(42), IntArray(7))
    var row = 0
    var posi = 0
    var rowToMove = 0
    var posiToMove = 0
    var playerTurn = 0
    var changeMode = 1
    var testMode = false
    var firststart = true
    init {

        val app = Javalin.create{ config ->
            config.addStaticFiles("/public")
        }.start(7070)

        app.get("/rows") { ctx: Context ->
            game.reset()
            ctx.result(game.toStringWeb())
            testMode = false
            if (playerTurn == 1){
                game = FourConnect(longArrayOf(0L,0L), IntArray(43), IntArray(7))
                game.reset()
                game = FourConnect(game.playBoard,game.move,game.heightCol,++game.count)
                val move = game.bestMoveNxt(game)
                game = game.makeMove(move)
                ctx.result(game.toStringWeb())
            }
        }
        app.get("/move"){ ctx: Context ->
            if(game.isWin(game.playBoard[0]) || game.isWin(game.playBoard[1])) {
                ctx.result(game.toStringWeb())
            } else {
                val test = ctx.queryParam("pos")!!.toInt()
                game = game.makeMove(test)
                ctx.result(game.toStringWeb())
            }
        }


        app.get("/reset"){ctx : Context ->
            if (playerTurn == 1) {
                game.reset()
                testMode = false
                game = FourConnect(game.playBoard,game.move,game.heightCol,++game.count)
                ctx.result(game.toStringWeb())
            } else {
                testMode = false
                game.reset()
                ctx.result(game.toStringWeb())
            }
        }

        app.get("/undo"){ctx: Context ->
            if(game.playBoard[0] == 0L && game.playBoard[1] == 0L) {
                ctx.result(game.toStringWeb())
            } else{
                game = game.undoMove()
                ctx.result(game.toStringWeb())
            }
        }

        app.get("/bot"){ctx: Context ->
            val botmove = game.bestMoveNxt(game)
            game = game.makeMove(botmove)
            ctx.result(game.toStringWeb())
        }

        app.get("/player"){ctx: Context ->
            val getPlayer = ctx.queryParam("turn")!!.toInt()
            playerTurn = getPlayer
        }



        app.get("/change"){ctx: Context ->
            val getMode = ctx.queryParam("mod")!!.toInt()
            changeMode = getMode
        }


        app.get("/bestM"){ctx: Context ->
            if (testMode){
                ctx.result(game.toStringWeb())
            } else {
                if (game.isWin(game.playBoard[0]) || game.isWin(game.playBoard[1])) {
                    ctx.result(game.toStringWeb())
                } else {
                    val bestM = game.chooseBestMove(game, 100)
                    game = game.makeMove(bestM)
                    ctx.result(game.toStringWeb())
                }
            }
        }

        app.get("/code"){ctx: Context ->
            println(game.getBoardCode(game))
            ctx.result(game.toStringWeb())
        }


        //@TEST
        app.get("/test"){ctx: Context ->
            val depth = ctx.queryParam("dep")!!.toInt()
            var boardCopy = FourConnect(longArrayOf(0L,0L), IntArray(42), IntArray(7))
            boardCopy.reset()
            if (depth == 1){
                boardCopy = FourConnect.testBoard[1]
                println(boardCopy.toString())
                println("Your best Move is: " + boardCopy.bestMoveNxt(boardCopy, 1))
                ctx.result(boardCopy.toStringWeb())
            } else if (depth == 2){
                boardCopy = FourConnect.testBoard[3]
                println(boardCopy.toString())
                println( "Your best Move is: " +  boardCopy.bestMoveNxt(boardCopy, 2))
                ctx.result(boardCopy.toStringWeb())
            } else if (depth == 3){
                boardCopy = FourConnect.testBoard[2]
                println(boardCopy.toString())
                println("Your best Move is: " +  boardCopy.bestMoveNxt(boardCopy, 3))
                ctx.result(boardCopy.toStringWeb())
            } else if (depth == 4){
                boardCopy = FourConnect.testBoard[4]
                println(boardCopy.toString())
                println("Your best Move is: " + boardCopy.bestMoveNxt(boardCopy, 4))
                ctx.result(boardCopy.toStringWeb())
            } else if (depth == 5){
                boardCopy = FourConnect.testBoard[0]
                println(boardCopy.toString())
                println("Your best Move is: " + boardCopy.bestMoveNxt(boardCopy, 5))
                ctx.result(boardCopy.toStringWeb())
            } else if (depth == 6) {
                game.reset()
                testMode = true
                ctx.result(boardCopy.toStringWeb())
            }
        }


        app.after("/move") { ctx: Context ->
            if (testMode){
                ctx.result(game.toStringWeb())
            } else {
                if (changeMode == 1){
                    if (game.isWin(game.playBoard[0]) || game.isWin(game.playBoard[1])) {
                        ctx.result(game.toStringWeb())
                    } else {
                        val botmove = game.bestMoveNxt(game,10)
                        game = game.makeMove(botmove)
                        ctx.result(game.toStringWeb())
                    }
                } else {
                    if (game.isWin(game.playBoard[0]) || game.isWin(game.playBoard[1])) {
                        ctx.result(game.toStringWeb())
                    } else {
                        val botmove = game.chooseBestMove(game,100)
                        game = game.makeMove(botmove)
                        ctx.result(game.toStringWeb())
                    }
                }
            }

        }


        app.after("/bestM") { ctx: Context ->
            if (testMode){
                ctx.result(game.toStringWeb())
            } else {
                if (changeMode == 1){
                    if (game.isWin(game.playBoard[0]) || game.isWin(game.playBoard[1])) {
                        ctx.result(game.toStringWeb())
                    } else {
                        val botmove = game.bestMoveNxt(game,10)
                        game = game.makeMove(botmove)
                        ctx.result(game.toStringWeb())
                    }
                } else {
                    if (game.isWin(game.playBoard[0]) || game.isWin(game.playBoard[1])) {
                        ctx.result(game.toStringWeb())
                    } else {
                        val botmove = game.chooseBestMove(game,100)
                        game = game.makeMove(botmove)
                        ctx.result(game.toStringWeb())
                    }
                }
            }

        }

    }
}

@ExperimentalUnsignedTypes
fun main(args: Array<String>) {
    val inputStream: InputStream = File("zobrist.txt").inputStream()
    val lineList = mutableListOf<String>()
    inputStream.bufferedReader().useLines { lines -> lines.forEach { lineList.add(it)} }
    var i = 0
    println("Initializing Memory")
    for (element in lineList) {
        FourConnect.zobristKey[i] = element.toULong()
        i++
    }

    val inputStream2: InputStream = File("databasezobrist.txt").inputStream()
    val lineList2 = mutableListOf<String>()

    inputStream2.bufferedReader().useLines { lines -> lines.forEach { lineList2.add(it)} }
    for(element in lineList2){
        var element1 = element
        element1 = element1.replace("\\(".toRegex(), "")
        element1 = element1.replace("\\)".toRegex(), "")
        element1 = element1.replace(" ".toRegex(), "")
        val index = element1.indexOf('=')
        val num = if(index == -1) 0 else element1.substring(0,index).toULong()
        val ulong = num.toString()
        val num4 = ulong.toULong()
        val index2 = element1.indexOf(',')
        val num1 = if(index2 == -1) -1 else element1.substring(index+1,index2).toInt()
        val num2 = if(index2 == -1) -1 else element1.substring(index2+1,element1.length).toInt()

        FourConnect.preparedMemory2[num4] = Pair(num1,num2)
    }

    println("Initializing Complete!")

    App()
}
